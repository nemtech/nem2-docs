# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2019, NEM
# This file is distributed under the same license as the nem2-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Yoshiyuki Ieyama <yukku0423+github@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: nem2-docs 0.17.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-20 22:54+0100\n"
"PO-Revision-Date: 2019-02-22 09:13+0000\n"
"Last-Translator: Yoshiyuki Ieyama <yukku0423+github@gmail.com>, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/nemtech/teams/95744/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:11
msgid "Monitoring a transaction status"
msgstr "トランザクションの監視"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:13
msgid ""
"Make sure a :doc:`transaction <../../concepts/transaction>` gets included in"
" the blockchain after being announced."
msgstr ""
"アナウンスした後に :doc:`トランザクション <../../concepts/transaction>` "
"がブロックチェーンに含まれることを理解してください。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:17
msgid "Background"
msgstr "背景"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:19
msgid ""
"After calling an API method that changes the database state, you usually "
"will receive a response if the change has been applied or failed due to some"
" constraint. The application spends precious time waiting for the response, "
"in the meanwhile other actions can be processed."
msgstr ""
"データベースの状態を変更する API "
"メソッドを呼び出すと、通常、変更が適用されたか、何らかの制約が原因で失敗した場合にレスポンスを受け取ります。アプリケーションはレスポンス待ちに貴重な時間を費やしますが、その間に他のアクションを処理することができます。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:21
msgid ""
"When working with blockchain technology, it is interesting to \"fire\" the "
"transaction, let the node process it, and receive a notification if it "
"succeeded or failed. Differently, from a traditional database, the average "
"confirmation time of modification is higher, passing from milliseconds to "
"seconds - or minutes in the worst case."
msgstr ""
"ブロックチェーンテクノロジーを利用している場合、トランザクションを\"起動\"してノードに処理させ、成功または失敗した場合に通知を受け取ることに興味がおありでしょう。従来のデータベースとは異なり、変更の平均的な承認時間は長く、ミリ秒から秒、最悪の場合は分になります。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:25
msgid "Prerequisites"
msgstr "前提条件"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:27
msgid ""
"Finish the :doc:`getting started section <../../getting-started/setup-"
"workstation>`"
msgstr ":doc:`入門セクション <../../getting-started/setup-workstation>` を終了している"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:31
msgid "Getting into some code"
msgstr "それではコードを見ていきましょう"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:33
msgid ""
"Catapult enables asynchronous transaction announcement. After you publish a "
"transaction, the API node will always accept it if it is well-formed."
msgstr ""
"Catapult は非同期のトランザクションアナウンスが可能です。トランザクションを公開した後、それが適格であれば、API ノードは常に受理します。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:35
msgid ""
"At this time, the server does not ensure that the transaction is valid - for"
" example, you don't have the amount of asset units you want to send-, hence "
"is not sure it will be added in a block."
msgstr ""
"その時、サーバはトランザクションが妥当かどうかを保証はしません - 例えば、あなたが送りたいアセットの量を持っていないこと - "
"したがって、それがブロックに追加されるかどうかはわかりません。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:37
msgid ""
"To make sure the transaction is added in a block, you must track the "
":doc:`transaction status <../../concepts/transaction>` using :ref:`Listeners"
" <websockets>`."
msgstr ""
"トランザクションがブロックに追加されたことを確認するには :ref:`リスナー <websockets>` を使用して "
":doc:`トランザクションステータス <../../concepts/transaction>` を追跡します。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:39
msgid ""
"Listeners enable receiving notifications possible when a change in the "
"blockchain occurs. The notification is received in real time without having "
"to poll the API waiting for a reply."
msgstr ""
"リスナーは変更がブロックチェーン内で発生したときに通知を受信することを可能にします。通知は API "
"の返答をポーリンクするのではなくリアルタイムに行われます。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:41
msgid ""
"Define the transaction you want to announce. In this case, we are going to "
"send the message ``Test`` to ``SD5DT3-CH4BLA-BL5HIM-EKP2TA-PUKF4N-Y3L5HR-"
"IR54``."
msgstr ""
"アナウンスしたいトランザクションを定義して下さい。この場合、メッセージとして ``Test`` を ``SD5DT3-CH4BLA-BL5HIM-"
"EKP2TA-PUKF4N-Y3L5HR-IR54`` へ送ろうとしています。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:45
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:56
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:66
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:75
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:88
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:101
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:114
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:127
msgid ""
":viewsource:`https://github.com/nemtech/nem2-docs/blob/master/source/resources/examples/typescript/transaction/MonitoringTransactionStatus.ts`"
msgstr ""

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:50
msgid "Sign the transaction with your account."
msgstr "あなたのアカウントでトランザクションに署名します。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:52
msgid ""
"To make the transaction only valid for your network, include the first block"
" generation hash. Open ``http://localhost:3000/block/1`` in a new tab and "
"copy the ``meta.generationHash`` value."
msgstr ""
"自分のネットワークでのみ妥当なトランザクションを作るには、最初のブロック生成ハッシュを含めます。新しいタブで "
"``http://localhost:3000/block/1`` を開いて ``meta.generationHash`` の値をコピーします。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:62
msgid ""
"Open a new :ref:`Listeners <websockets>`. This communicates with the API "
"WebSocket, who will communicate you asynchronously the status of the "
"transaction."
msgstr ""
"新しい :ref:`リスナ <websockets>` を開いてください。これは API WebSocket "
"と疎通し、トランザクションの状態を非同期にあなたへ伝えます。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:71
msgid ""
"Start monitoring if the WebSocket connection is alive. :doc:`Blocks "
"<../../concepts/block>` are generated every ``15`` seconds in average, so a "
"timeout can be raised if there is no response after 30 seconds "
"approximately."
msgstr ""
"WebSocket のコネクションが有効ならばモニタリングをスタートします。 :doc:`ブロック <../../concepts/block>` は "
"平均 ``15`` 秒毎で生成されるので、30秒間ほどレスポンスがない場合、タイムアウトが発生します。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:80
msgid ""
":viewsource:`https://github.com/nemtech/nem2-docs/blob/master/source/resources/examples/bash/blockchain/ListeningNewBlocks.sh`"
msgstr ""

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:84
msgid ""
"Monitor if there is some validation error with the transaction issued. When "
"you receive a message from status WebSocket channel, it always means the "
"transaction did not meet the requirements. You need to handle the error "
"accordingly, by reviewing the :ref:`error status list <status-errors>`."
msgstr ""
"発行されたトランザクションにバリデーションエラーがあるかどうかを監視します。ステータス WebSocket "
"チャンネルからメッセージを受け取る場合、それはトランザクションが要件を満たさなかったことを意味します。エラーを適切にハンドリングするためには "
":ref:`エラーステータスリスト <status-errors>` を参照してください。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:93
msgid ""
":viewsource:`https://github.com/nemtech/nem2-docs/blob/master/source/resources/examples/bash/transaction/MonitoringTransactionStatusError.sh`"
msgstr ""

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:97
msgid ""
"Monitor as well if the transaction reaches the network. When you receive a "
"message from unconfirmed WebSocket channel, the transaction is valid and is "
"waiting to be included in a block. This does not mean necessarily that the "
"transaction will be included, as a second validation happens before being "
"finally confirmed."
msgstr ""
"トランザクションがネットワークに到達したかどうかも監視します。未承認 WebSocket "
"チャンネルからメッセージを受け取る場合、トランザクションは妥当であり、ブロックに取りこまれるのを待っている状態です。2回目のバリデーションが最終的に確認される前に行われるため、これはトランザクションが含まれるのが確定したことを意味するものではありません。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:106
msgid ""
":viewsource:`https://github.com/nemtech/nem2-docs/blob/master/source/resources/examples/bash/transaction/MonitoringTransactionUnconfirmed.sh`"
msgstr ""

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:110
msgid ""
"Monitor when the transaction gets included in a block. When included, "
"transaction can still be :doc:`rolled-back <../../concepts/transaction>` "
"because of forks. You can decide for yourself that after e.g. 6 blocks the "
"`transaction is secured "
"<https://gist.github.com/aleixmorgadas/3d856d318e60f901be09dbd23467b374>`_."
msgstr ""
"トランザクションがブロックに含まれたことを監視します。含まれても、トランザクションにはまだフォークによる :doc:`ロールバック "
"<../../concepts/transaction>` の可能性があります。あなた自身で、例えば、6ブロックで `トランザクションがセキュア "
"<https://gist.github.com/aleixmorgadas/3d856d318e60f901be09dbd23467b374>`_ "
"であると、決めることができます。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:119
msgid ""
":viewsource:`https://github.com/nemtech/nem2-docs/blob/master/source/resources/examples/bash/transaction/MonitoringTransactionConfirmed.sh`"
msgstr ""

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:123
msgid "Finally, announce the transaction to the network."
msgstr "最後に、トランザクションをネットワークへアナウンスします。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:132
msgid ""
":viewsource:`https://github.com/nemtech/nem2-docs/blob/master/source/resources/examples/bash/transaction/SendingATransferTransaction.sh`"
msgstr ""

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:136
msgid ""
"If you missed the WebSocket response, check the transaction status after by "
"calling the `transaction status "
"<https://nemtech.github.io/endpoints.html#operation/getTransactionStatus>`_ "
"endpoint. The status of failed transactions is not persistent, meaning that "
"eventually is pruned."
msgstr ""
"WebSocket のレスポンスを失った場合、 `トランザクションステータス "
"<https://nemtech.github.io/endpoints.html#operation/getTransactionStatus>`_ "
"エンドポイントを呼び出すことで、トランザクションの状態を確認できます。失敗したトランザクションの状態は永続的ではなく、最終的には除去されます。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:138
msgid ""
"If you are developing a small application, and monitoring asynchronous "
"transactions adds too much overhead to your project, consider :doc:`turning "
"asynchronous transactions announcement into synchronous <turning-the-"
"asynchronous-transaction-announcement-into-synchronous>`."
msgstr ""
"もし小さなアプリケーションを開発していて、トランザクションを非同期にモニタリングすることがあまりにも大きなオーバーヘッドになるのであれば、:doc:`非同期トランザクションアナウンスを同期的へ変更する"
" <turning-the-asynchronous-transaction-announcement-into-synchronous>` "
"ことを検討してください。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:144
msgid "Troubleshooting: Monitoring transactions on the client side"
msgstr "トラブルシューティング: クライアントサイドでのトランザクションの監視"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:146
msgid ""
"The nem2-sdk for typescript base Listener was designed to work on Node.js "
"backend environments."
msgstr ""
"Typescript ベースの nem2-sdk の Listener はバックエンドの Node.js で動作するように設計されています。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:148
msgid ""
"To make the code work in the client side (e.g., Angular, React, Vue.), pass "
"the browser implementation of the WebSocket to the Listener."
msgstr ""
"このコードをクライアントサイド(例: Angular, React, Vue)で動作させるためには、WebSocket "
"のブラウザ実装をリスナーに渡します。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:157
msgid "What's next?"
msgstr "次は？"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:159
msgid ""
"Run your application and try to :doc:`send a transfer transaction "
"<../transaction/sending-a-transfer-transaction>` to the selected account. If"
" all goes well, you will see the transaction information in your terminal."
msgstr ""
"あなたのアプリケーションを実行し、選択したアカウントへ :doc:`転送トランザクションを送信 <../transaction/sending-a"
"-transfer-transaction>` してみてください。すべてが上手く行けば、ターミナルにトランザクションの情報が表示されるでしょう。"
