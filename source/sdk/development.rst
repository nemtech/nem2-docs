:orphan:

###############
SDK Development
###############

A key objective is that interoperability becomes a natural design of the NEM2-SDK. Follow this guideline to collaborate creating a NEM SDK, achieving the best quality
with the less effort.

***********************
Learning about Catapult
***********************

In case you haven't used NEM2-SDK or Catapult in general, we encourage you to:

1. Review the technical documentation to become familiar with the :doc:`NEM built-in features<../concepts/account>`.
2. Setup the `catapult in local environment via docker <https://github.com/tech-bureau/catapult-service-bootstrap>`_ or enroll the `beta program <https://mijin.io/en/product/#mijin2>`_ to access a Catapult Test Net without the need to run it yourself.
3. :doc:`Check the API reference <../api/requests>` and play with the API endpoints.
4. Become familiar with the current  :doc:`nem2-sdk via code examples <../guides/overview>` & :doc:`nem2-cli <../cli/overview>` .
5. `Join <https://join.slack.com/t/nem2/shared_invite/enQtMzY4MDc2NTg0ODgyLTFhZjgxM2NhYTQ1MTY1Mjk0ZDE2ZTJlYzUxYWYxYmJlYjAyY2EwNGM5NzgxMjM4MGEzMDc5ZDIwYTgzZjgyODM>`_ our Slack to ask Catapult related questions.

***********
Development
***********

You can base your work in `TypeScript <https://github.com/nemtech/nem2-sdk-typescript-javascript>`_
and `Java <https://github.com/nemtech/nem2-sdk-java>`_ SDKs. The TypeScript version is the first SDK getting the latest updates. Meanwhile, Java takes longer to be updated.

Unfortunately, TypeScript version has one specific implementation detail: the low level implementation is separated from the SDK, called `nem2-library-js <https://github.com/nemtech/nem2-library-js>`_. There
was a need to create this low-level library to perform specific chain testing.

**The SDKs you create does not require this separate implementation**.

Regularly check the `Changelog <https://github.com/nemtech/nem2-sdk-java/blob/master/CHANGELOG.md>`_ to be sure you didn't miss any code change update.

Before starting
===============

1. Be sure no one is already working on the SDK you want to create.
   Check the :doc:`repository list <languages>`, if someone is already
   working on it, we suggest you collaborate with him/her.
2. Claim the SDK `forking this
   repository <https://help.github.com/articles/creating-a-pull-request/>`_
   and adding a new entry to the :doc:`repository list <languages>`.
3. Consider using one of the suggested
   `licenses <#recommended-licenses>`_.

Creating the project
=====================

1. Add a README with the instructions to install the SDK. Find
   :download:`here a template <../resources/templates/README_SDK.md>`.
2. Add a `Code of
   Conduct <https://help.github.com/articles/adding-a-code-of-conduct-to-your-project/>`_.
   Find :download:`here an example <../resources/templates/CODE_OF_CONDUCT.md>`.
3. Add a `Contributors
   guidelines <https://help.github.com/articles/setting-guidelines-for-repository-contributors/>`_
   to help others know how they can help you. Find
   :download:`here a CONTRIBUTING.md template<../resources/templates/CONTRIBUTING.md>`.
4. Setup the Continuous Integration system. We use
   `travis-ci <https://travis-ci.org/>`_, but feel free to use the one
   suits you best.

A project with a good test coverage it's more likely to be used and
trusted by the developers!

We **strongly** suggest you to do `Test-Driven
Development <https://en.wikipedia.org/wiki/Test-driven_development>`_
or Unit-Testing (test last). If you need inspiration, you can adapt the
same `tests we
did <https://github.com/nemtech/nem2-sdk-typescript-javascript/tree/master/test>`_.

API Wrapper
===========

The API generation can be done with `Swagger
Codegen <https://swagger.io/tools/swagger-codegen/>`_. It supports
multiple languages. Hopefully, yours in the list.

The API swagger file definition can be found
`here <https://github.com/nemtech/nem2-docs/blob/master/source/resources/collections/swagger.yaml>`_.

`Java
example <https://github.com/nemtech/nem2-sdk-java/tree/master/src/main/java/io/nem/sdk/infrastructure>`_.
The code generated by swagger are the ``DTOs``.

We drop the client classes and instead we implement them using the
`Repository
pattern <https://martinfowler.com/eaaCatalog/repository.html>`_
returning
`Observables <https://en.wikipedia.org/wiki/Observer_pattern>`_ of
`ReactiveX <http://reactivex.io/>`_.

List of interfaces:

-  `AccountRepository <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/infrastructure/AccountRepository.java>`_
-  `BlockchainRepository <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/infrastructure/BlockchainRepository.java>`_
-  `MosaicRepository <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/infrastructure/MosaicRepository.java>`_
-  `NamespaceRepository <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/infrastructure/NamespaceRepository.java>`_
-  `NetworkRepository <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/infrastructure/NetworkRepository.java>`_
-  `TransferRepository <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/infrastructure/TransactionRepository.java>`_

Check the `Http
implementations <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/infrastructure/AccountHttp.java>`_
in case you doubt about some API endpoint.

.. warning:: The **repositories return Models instead of DTOs**. You will need to code the `Models <#models>`_ before finish the API wrapper.

Models
======

`Java models
example <https://github.com/nemtech/nem2-sdk-java/tree/master/src/main/java/io/nem/sdk/model>`_.

The models are by default immutable. The models aim to hide the
complexity, like type conversion or relationship between objects.

You will find in the different implementations different invariants to
ensure the object is well constructed and a nicer API is published.

Particular decisions to consider:

-  ``uint64`` support: meanwhile `Java supports big
   numbers <https://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html>`_,
   for example JavaScript doesn't. The JavaScript SDK has a custom class
   to handle the `uint64
   types <https://github.com/nemtech/nem2-sdk-typescript-javascript/blob/master/src/model/UInt64.ts>`_.
   If your language supports ``uint64`` use that implementation.
   Otherwise, adapt the ``UInt64.ts`` implementation to your language.
-  API conversions: The API returns the data sometimes compressed, you
   might need to convert that types for the user.
-  `Mosaics <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/mosaic/MosaicId.java>`_
   &
   `Namespaces <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/namespace/NamespaceId.java>`_
   IDs: The namespaces and mosaics aren't strings any more compared to
   NIS1. As you can see in the class, the ``string`` name is optional.
   At creation time you add the string name, but when you receive the
   Namespace/Mosaic from the network, it comes in formatted
   as\ ``uint64`` ID. A specific endpoint returns the Namespace/Mosaic
   ``string`` name. We did a Service to return the Mosaic with the
   ``string`` name automatically for the user, check the 
   `implementation here <https://github.com/nemtech/nem2-sdk-typescript-javascript/blob/master/src/service/MosaicService.ts>`_
   (only available in TypeScript SDK version).

Transaction Serialization
=========================

.. warning:: The Transaction Serialization will change when `catbuffer <https://github.com/nemtech/catbuffer>`_ tool is finished. Meanwhile, we will use `flatbuffers <https://google.github.io/flatbuffers/>`_.

A Transaction needs a particular serialization schema in binary
optimized in size. The transaction serialization has multiple steps to
keep easy to create transactions and maintain the schema serialization.

**Generating the buffer classes: The easy part**


1. Install the `flatbuffers
   tool <https://github.com/google/flatbuffers/releases>`_, you might
   need to compile it. Use version 1.7.1 or newer.
2. `Compile the schema for your
   language <https://google.github.io/flatbuffers/flatbuffers_guide_using_schema_compiler.html>`_.
   `Download the flatbuffers files
   here <https://github.com/nemtech/guidelines/tree/master/development/sdk-development-assets/flatbuffers>`_.
3. Move the generated files to your ``model/transaction`` SDK folder.
   `Example <https://github.com/nemtech/nem2-sdk-java/tree/master/src/main/java/io/nem/sdk/model/transaction>`_.

**Creating the Schema class: The difficult part**

4.  Create the `Schema
    class <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/Schema.java>`_.
5.  Create the `SchemaAttribute
    class <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/SchemaAttribute.java>`_.
6.  Create the `ScalarAttribute
    class <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/ScalarAttribute.java>`_.
7.  Create the `ArrayAttribute
    class <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/ArrayAttribute.java>`_.
8.  Create the `TableAttribute
    class <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/TableAttribute.java>`_.
9.  Create the `TableArrayAttribute
    class <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/TableArrayAttribute.java>`_.
10. `Constants
    class <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/Constants.java>`_.

**Creating the Transaction Schemas**

Each transaction has a Schema. It has the same type as
``flatbuffer schemas`` but using the ``Schema`` class. It's used to know
where each component is located in the ``flatbuffer schema`` and remove
the unnecessary bytes to create the optimized serialization.

11. `AggregateTransactionSchema <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/AggregateTransactionSchema.java>`_.
12. `LockFundsTransactionSchema <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/LockFundsTransactionSchema.java>`_.
13. `ModifyMultisigAccountTransactionSchema <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/ModifyMultisigAccountTransactionSchema.java>`_.
14. `MosaicDefinitionTransactionSchema <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/MosaicDefinitionTransactionSchema.java>`_.
15. `MosaicSupplyChangeTransactionSchema <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/MosaicSupplyChangeTransactionSchema.java>`_.
16. `RegisterNamespaceTransactionSchema <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/RegisterNamespaceTransactionSchema.java>`_.
17. `SecretLockTransactionSchema <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/SecretLockTransactionSchema.java>`_.
18. `SecretProofTransactionSchema <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/SecretProofTransactionSchema.java>`_.
19. `TransferTransactionSchema <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/TransferTransactionSchema.java>`_.

**Using the Schemas in the Transaction Models**

The Transaction class has the abstract method
`generateBytes() <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/Transaction.java#L159>`_.
Each Transaction has to implement and use the previous classes, the
Buffers and the Schemas, to serialize the transaction.

20. `AggregateTransaction.generateBytes() <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/AggregateTransaction.java#L97>`_.
21. `LockFundsTransaction.generateBytes() <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/LockFundsTransaction.java#L97>`_.
22. `ModifyMultisigAccountTransaction.generateBytes() <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/ModifyMultisigAccountTransaction.java>`_.
23. `MosaicDefinitionTransaction.generateBytes() <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/MosaicDefinitionTransaction.java>`_.
24. `MosaicSupplyChangeTransaction.generateBytes() <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/MosaicSupplyChangeTransaction.java>`_.
25. `RegisterNamespaceTransaction.generateBytes() <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/RegisterNamespaceTransaction.java>`_.
26. `SecretLockTransaction.generateBytes() <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/SecretLockTransaction.java>`_.
27. `SecretProofTransaction.generateBytes() <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/SecretProofTransaction.java>`_.
28. `TransferTransaction.generateBytes() <https://github.com/nemtech/nem2-sdk-java/blob/master/src/main/java/io/nem/sdk/model/transaction/TransferTransaction.java>`_.

**Do not forget about Cosignatory classes**, it has to be done too.

KeyPair and Cryptographic functions
===================================

.. warning:: This section is incomplete.

********************
Documenting your SDK
********************

SDKs need to be adopted by other developers. As a contributor, no one
knows better than you how a determined SDK works. Consider helping
others and spread the usage of the SDK by providing :doc:`the following
documentation <documentation>`.

******************************
Publishing the SDK as official
******************************

When you open-source your code,
:doc:`submit the repository to this page <../sdk/languages>`.

To become an accepted SDK, it should be proposed as a
`NIP <https://github.com/nemtech/NIP/blob/master/NIPs/nip-0001.md>`_. The reason
behind the NEM2 Improvement Proposal is to ensure that the new
libraries are reviewed, tested and shared among NEM developers.

***********
Future work
***********

The current guideline shows what is done up to today since the SDK isn't
complete. It will get updates according to the latest
architecture/features.

********************
Recommended Licenses
********************

-  MIT: `Expat/MIT/X11 license <https://opensource.org/licenses/MIT>`_
-  Apache-2.0: `Apache License, version
   2.0 <http://www.apache.org/licenses/LICENSE-2.0>`_
-  BSD-2-Clause: `OSI-approved BSD 2-clause
   license <https://opensource.org/licenses/BSD-2-Clause>`_
-  BSD-3-Clause: `OSI-approved BSD 3-clause
   license <https://opensource.org/licenses/BSD-3-Clause>`_
-  CC0-1.0: `Creative Commons CC0 1.0
   Universal <https://creativecommons.org/publicdomain/zero/1.0/>`_
-  GNU-All-Permissive: `GNU All-Permissive
   License <http://www.gnu.org/prep/maintain/html_node/License-Notices-for-Other-Files.html>`_
-  LGPL-2.1+: `GNU Lesser General Public License (LGPL), version 2.1 or
   newer <http://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html>`_

