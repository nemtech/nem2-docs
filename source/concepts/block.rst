#####
Block
#####

The central element of every cryptocurrency is a public ledger called the **blockchain**, which links blocks together.

.. Each NEM block can contain up to ``N`` :doc:`transactions <transaction>`.

Since the blocks in the chain are ordered, the complete **transaction history** is held in the blockchain. Subsequent blocks in the blockchain have increasing heights that differ by one.

Blocks are stored in a database as permanent medium. NEM calls the first block in the chain the **nemesis block**.

NEM blocks complete every ``15`` seconds, making transactions confirm quickly enough for everyday use.

**************
Block creation
**************

Blocks are created by :doc:`accounts <account>`. The process of creating new blocks is called :doc:`harvesting <harvesting>`. The **harvesting account**—called the harvester— gets the :doc:`fees <fees>` for the transactions in the block and :doc:`inflation <inflation>`. This gives the harvester an incentive to add as many transactions to the block as possible.

******
Guides
******

.. postlist::
    :category: Block
    :date: %A, %B %d, %Y
    :format: {title}
    :list-style: circle
    :excerpts:
    :sort:

*******
Schemas
*******

.. note:: Configuration parameters are :properties:`editable <config-network.properties>`. Public network configuration may differ.

.. _block-header:

BlockHeader
===========

Serialization of the block header.

**Inlines:**

* :ref:`SizePrefixedEntity <size-prefixed-entity>`
* :ref:`VerifiableEntity <verifiable-entity>`
* :ref:`EntityBody <entity-body>`

.. csv-table::
    :header: "Property", "Type", "Description"
    :delim: ;
    :widths: 30 30 40

    height; :schema:`Height <types.cats#L5>`; Height of the blockchain. Each block has a unique height. Subsequent blocks differ in height by 1.
    timestamp; :schema:`Timestamp <types.cats#L5>`; Number of milliseconds elapsed since the creation of the nemesis block.
    difficulty; :schema:`Difficulty <types.cats#L4>`; Average difficulty divided by the average block creation time for the last ``60`` blocks. If the new difficulty is more than 5% greater or smaller than the difficulty of the last block, then the change is capped to 5%. Additionally, difficulties are kept within certain bounds. The new difficulty is clamped to the boundaries if it is greater than 10\ :sup:`15` or smaller than 10\ :sup:`13`\ .
    previousBlockHash; :schema:`Hash256 <types.cats#L12>`; Hash of the previous block.
    transactionsHash; :schema:`Hash256 <types.cats#L12>`; Hash of the transactions in this block.
    receiptsHash; :schema:`Hash256 <types.cats#L12>`;  Hash of the receipts generated by this block.
    stateHash; :schema:`Hash256 <types.cats#L12>`;   Hash of the global chain state at this block.
    beneficiaryPublicKey; :schema:`Key <types.cats#L14>`; Public key of the optional beneficiary designated by harvester.
    feeMultiplier; :schema:`BlockFeeMultiplier <types.cats#L3>` ; Fee multiplier applied to block transactions.
    blockHeader_Reserved1; uint32; Reserved padding to align end of BlockHeader on 8-byte boundary.
.. |merkle| raw:: html

    <a href="https://en.wikipedia.org/wiki/Merkle_tree" target="_blank">merkle tree</a>

.. |patricia| raw:: html

   <a href="https://en.wikipedia.org/wiki/Radix_tree" target="_blank">patricia tree</a>

.. _size-prefixed-entity:

SizePrefixedEntity
==================

Serialization of an entity that has a prefixed size.

.. csv-table::
    :header: "Property", "Type", "Description"
    :delim: ;

    size; unit32; Size of the transaction.

.. _verifiable-entity:

VerifiableEntity
================

Serialization of an entity that should be signed by an account.

.. csv-table::
    :header: "Property", "Type", "Description"
    :delim: ;

    verifiableEntityHeader_Reserved1; uint32; reserved padding to align Signature on 8-byte boundary.
    signature; :schema:`Signature <types.cats#L15>`; Entity signature generated by the signer.

.. _entity-body:

EntityBody
==========

Serialization of an entity. An entity could be a block or a :doc:`transaction <transaction>`.

.. csv-table::
    :header: "Property", "Type", "Description"
    :delim: ;

    signerPublicKey; :schema:`Key <types.cats#L14>`; Public key of the signer of the entity.
    entityBody_Reserved1; uint32; Reserved padding to align end of EntityBody on 8-byte boundary.
    version; uint8; Version of the structure.
    network; :ref:`Network <network-type>`; Entity network.
    type; :ref:`EntityType <entity-type>`; Entity type.

.. _network-type:

NetworkType
===========

Enumeration: uint8

.. csv-table::
    :header: "Id", "Description"
    :delim: ;

    0x68; (MAIN_NET); Public network.
    0x98; (TEST_NET); Public test network.
    0x60; (MIJIN) Private network.
    0x90; (MIJIN_TEST) Private test network.

.. _entity-type:

EntityType
==========

Enumeration: uint16

.. csv-table::
    :header: "Id", "Description"
    :delim: ;

    0x0000; Reserved.
