#####
Block
#####

The central element of every cryptocurrency is a public ledger called the **blockchain**, which links blocks together.

Since the blocks in the chain are ordered, the complete :doc:`transaction <transaction>` **history** is held on the blockchain. Subsequent blocks have increasing heights that differ by one. Each block can contain up to ``1,000`` transactions (public network), being this value :ref:`configurable per network <config-network-properties>`.

Blocks are stored in a database as permanent medium. Catapult calls the first block in the chain the **nemesis block**.

Catapult blocks complete every ``15`` seconds, making transactions confirm quickly enough for everyday use.

**************
Block creation
**************

Blocks are created by :doc:`accounts <account>`. The process of creating new blocks is called :doc:`harvesting <harvesting>`. The **harvesting account**—called the harvester— gets the :doc:`fees <fees>` for the transactions in the block and :doc:`inflation <inflation>`. This gives the harvester an incentive to add as many transactions to the block as possible.

************
Block header
************

Serialization of the block header.

**Inlines:**

* :ref:`SizePrefixedEntity <size-prefixed-entity>`
* :ref:`VerifiableEntity <verifiable-entity>`
* :ref:`EntityBody <entity-body>`

.. _block-header:

.. csv-table::
    :header: "Property", "Type", "Description"
    :delim: ;
    :widths: 30 30 40

    height; :schema:`Height <types.cats#L5>`; Height of the blockchain. Each block has a unique height. Subsequent blocks differ in height by 1.
    timestamp; :schema:`Timestamp <types.cats#L8>`; Number of milliseconds elapsed since the creation of the nemesis block.
    difficulty; :schema:`Difficulty <types.cats#L4>`; Determines how difficult is to find a new block, based on previous blocks.
    previousBlockHash; :schema:`Hash256 <types.cats#L12>`; Hash of the previous block.
    transactionsHash; :schema:`Hash256 <types.cats#L12>`; Hash of the transactions in this block.
    receiptsHash; :schema:`Hash256 <types.cats#L12>`;  Hash of the receipts generated by this block.
    stateHash; :schema:`Hash256 <types.cats#L12>`;   Hash of the global chain state at this block.
    beneficiaryPublicKey; :schema:`Key <types.cats#L14>`; Public key of the optional beneficiary designated by harvester.
    feeMultiplier; :schema:`BlockFeeMultiplier <types.cats#L3>` ; Fee multiplier applied to block transactions.
    blockHeader_Reserved1; uint32; Reserved padding to align end of BlockHeader on 8-byte boundary.

.. |merkle| raw:: html

    <a href="https://en.wikipedia.org/wiki/Merkle_tree" target="_blank">merkle tree</a>

.. |patricia| raw:: html

   <a href="https://en.wikipedia.org/wiki/Radix_tree" target="_blank">patricia tree</a>

******
Guides
******

.. postlist::
    :category: Block
    :date: %A, %B %d, %Y
    :format: {title}
    :list-style: circle
    :excerpts:
    :sort:

Continue: :doc:`Transaction <transaction>`.
