##########
Harvesting
##########

The process of creating new :doc:`block <block>` is called harvesting.
In this process, the :doc:`account <account>` that harvested the block, called the `harvester`, will be rewarded with the transactoin fees and the infltion tokens, if applicable. While the nodes are responsible in adding the transactions to the block, the rewards still encourage nodes to include as many transaction as possible in a block and to allowing slots for delegated harvesting. This is because the node which the block it forms is being harvested will be rewarded through its beneficiary account. 

.. note:: Other public chain forking from Catapult might have inflation features. 

********************
Eligibility criteria
********************

An account needs to hold a :properties:`minimum amount <config-network.properties>` of mosaic to have importance score greater than zero. The :ref:`importance score <importance-calculation>` determines the probability of an account to harvest the next block. The :ref:`block header <block-header>` will include the public key and signature generated by the harvesting account.

.. note:: Configuration parameters are editable. The importance score calculation formula and the minimum amount required to harvest may differ for the public network configuration.

.. _harvesting-mosaic:

*****************
Harvesting mosaic
*****************

Catapult software allows the :properties:`definition <config-network.properties>` of any :doc:`mosaic <mosaic>` for harvesting purposes to fit the business needs. The catapult test network names this mosaic ``cat.harvest``.

For example, consortium networks can distribute harvesting mosaics between the companies that are running the infrastructure, while other participants need to pay fees in the form of :ref:`currency mosaic <fees>` to consume services.

By contrast, public networks might decide to use the same mosaic for paying transaction fees and running the network.

.. _local-harvesting:

****************
Local harvesting
****************

An eligible harvesting account can harvest new blocks by :ref:`running a node <local-harvesting>`. To harvest locally, provide the private key of an eligible account in [config-harvesting.properties.](https://github.com/nemtech/catapult-server/blob/master/resources/config-harvesting.properties)

Local harvesting is secure as long as no one accesses to your node instance, which stores the private key.

********************
Delegated harvesting
********************

An eligible account may also delegating its important score to a :ref:`remote node <delegated-harvesting>` for harvesting. 

Delegated harvesting enables an account to use a proxy private key that can be shared with a catapult-server node
securely. In other words, you can use the importance of your account to harvest new blocks without running a node.

After an account activates delegated harvesting, its importance score will be transferred to a remote account. The remote account inherits the importance score of the original account.

Security-wise, sharing a proxy private key does not compromise the original account since:

* The remote account has zero balance.
* The remote account by itself can't transfer the importance to another account.
* The original account receives the resulting fees.

.. csv-table:: Comparison between local and delegated harvesting
    :header: "", "Local harvesting", "Delegated harvesting"
    :delim: ;

    **Configuration** ; Setup catapult-server node.; Activate remote harvesting.
    **Cost** ; The node maintenance (electricity, cost VPN).; The transaction fee.
    **Security**; The private key is stored in the node.; A proxy private key is shared with node.
    **Reward**; Equal.; Equal.

*******
Schemas
*******

.. _account-link-transaction:

AccountLinkTransaction
======================

Announce an AccountLinkTransaction to delegate the account importance to a proxy account. By doing so, you can enable
delegated harvesting.

**Version**: 0x02

**Entity type**: 0x414C

**Inlines**:

* :ref:`Transaction <transaction>` or :ref:`EmbeddedTransaction <embedded-transaction>`

.. csv-table::
    :header: "Property", "Type", "Description"
    :delim: ;

    remoteAccountKey; 32 bytes (binary); The public key of the remote account.
    linkAction; :ref:`LinkAction <link-action>`; The account link action.

.. _link-action:

LinkAction
==========

Enumeration: uint8

.. csv-table::
    :header: "Id", "Description"
    :delim: ;

    0; Link.
    1; Unlink.
