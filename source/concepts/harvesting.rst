##########
Harvesting
##########

The process of creating new :doc:`blocks <block>` is called harvesting.

The harvesting :doc:`account <account>` - called the harvester - gets the fees for the :doc:`transactions <transaction>` in the block. This reward gives the harvester an incentive to add as many transactions to the block as possible.

********************
Eligibility criteria
********************

The :doc:`account importance <account>` determines the chances to create a new block. The importance is calculated as the relation between the number of :ref:`harvesting mosaics <harvesting-mosaic>` the account owns and the total supply available.

.. note:: Configuration parameters are editable. The importance calculation formula and the minimum amount required to harvest may differ for the public network configuration.

The account needs to hold a `minimum amount <https://github.com/nemtech/catapult-server/blob/master/resources/config-network.properties#L26>`_ of this harvesting mosaic to have importance greater than zero.

Harvester accounts owners can use their importance to create new blocks either :ref:`running a node <local-harvesting>` or delegating it to a :ref:`remote node <delegated-harvesting>`.

.. _harvesting-mosaic:

*****************
Harvesting mosaic
*****************

Catapult software allows defining any :doc:`mosaic <mosaic>` for harvesting, using its `configurable properties <https://github.com/nemtech/catapult-server/blob/master/resources/config-network.properties#L13>`_ to fit the business needs. The catapult test network names this mosaic ``cat.harvest``.

For example, consortium networks can distribute harvesting mosaics between the companies that are running the infrastructure, while other participants need to pay fees in the :ref:`currency mosaic <fees>` to consume services.

By contrast, public networks might decide to use the same mosaic for paying transaction fees and running the network.

.. _local-harvesting:

****************
Local harvesting
****************

During the installation of a :doc:`node <node>`, you will be asked to set up an account that will be used to harvest. The :ref:`block header <block-header>` includes the public key and signature generated by
the harvester account.

Besides, each node can set a ``beneficiary`` public key to share a percentage of the harvesting rewards., being the sharing ratio configurable per network. When the node does not define a beneficiary, all the rewards go to the block singer.

Local harvesting is secure as long as no one accesses your node instance, which is storing the private key.

.. _delegated-harvesting:

********************
Delegated harvesting
********************

Delegated harvesting enables an account to use a proxy private key that can be shared with a node securely. In other words, you can use the importance of your account to create new blocks without running a node.

After an account activates delegated harvesting, its importance is transferred to a remote account. The remote account inherits the importance of the original account. Security-wise, sharing a proxy private key with a remote node does not compromise the original account since:

* The remote account has zero balance.
* The remote account by itself can't transfer the importance to another account.
* The original account receives the resulting fees.

Remote harvesters may not receive the complete reward if the following conditions are met:

*  The network harvesting sharing rate is greater than 0.
*  The node selected has defined a :ref:`beneficiary account <local-harvesting>`.

.. csv-table:: Comparison between local and delegated harvesting
    :header: "", "Local harvesting", "Delegated harvesting"
    :delim: ;

    **Configuration** ; Setup node.; Activate remote harvesting.
    **Cost** ; The node maintenance (electricity, cost VPN).; The activation transaction fee.
    **Security**; The node stores the private key.;  A proxy private key is shared with a node.
    **Reward**; Complete. The node owner can share part of the reward with a beneficiary account.; Total reward - beneficiary share.

*******
Schemas
*******

.. _account-link-transaction:

AccountLinkTransaction
======================

Announce an AccountLinkTransaction to delegate the account importance to a proxy account.

**Version**: 0x02

**Entity type**: 0x414C

**Inlines**:

* :ref:`Transaction <transaction>` or :ref:`EmbeddedTransaction <embedded-transaction>`

.. csv-table::
    :header: "Property", "Type", "Description"
    :delim: ;

    remoteAccountKey; 32 bytes (binary); The public key of the remote account.
    linkAction; :ref:`LinkAction <link-action>`; The account link action.

.. _link-action:

LinkAction
==========

Enumeration: uint8

.. csv-table::
    :header: "Id", "Description"
    :delim: ;

    0; Link.
    1; Unlink.
